REPORT ymat_config_list NO STANDARD PAGE HEADING
  LINE-SIZE  255
  LINE-COUNT 65(0)
  MESSAGE-ID zblr.

TYPE-POOLS:
  ibco2.

* selection criterias ...
DATA:  w_matnr    LIKE mara-matnr.
DATA:  w_werks    LIKE marc-werks.
DATA:  w_atnam    LIKE cabn-atnam.
*
SELECTION-SCREEN BEGIN OF BLOCK inputti WITH FRAME TITLE text-001.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) text-f01 FOR FIELD p_matnr.
SELECTION-SCREEN POSITION 31.
SELECT-OPTIONS: p_matnr FOR w_matnr
                NO INTERVALS OBLIGATORY DEFAULT 'SICOTE-220-S'.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) text-f02 FOR FIELD p_werks.
SELECTION-SCREEN POSITION 31.
SELECT-OPTIONS: p_werks  FOR w_werks
                NO INTERVALS OBLIGATORY DEFAULT 'BSIM'.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) text-f03 FOR FIELD p_atnam.
SELECTION-SCREEN POSITION 31.
SELECT-OPTIONS: p_atnam  FOR w_atnam
                NO INTERVALS.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN SKIP.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(32) text-f04 FOR FIELD p_dload.
SELECTION-SCREEN POSITION 33.
PARAMETERS:     p_dload  AS CHECKBOX DEFAULT ' '.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN SKIP.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(32) text-f05 FOR FIELD p_extra.
SELECTION-SCREEN POSITION 33.
PARAMETERS:     p_extra  AS CHECKBOX DEFAULT ' '.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK inputti.

TABLES: marc.

DATA: BEGIN OF t_marc_info OCCURS 0,
        matnr LIKE marc-matnr,
        werks LIKE marc-werks,
        cuobj LIKE marc-cuobj,
        spart LIKE mara-spart,
      END OF t_marc_info.

DATA: BEGIN OF t_result OCCURS 0,
        werks      LIKE marc-matnr,
        matnr      LIKE marc-matnr,
        spart      LIKE mara-spart,
        atnam      LIKE cabn-atnam,     " From atinn
        char_value LIKE ibvalue0-atwrt, " Orig char or converted num.
        atflv      LIKE ibvalue0-atflv, " Orig num. value
        atfor      LIKE  cabn-atfor,    " Type of characteristic
        anzst      LIKE  cabn-anzst,    " Number of characters
        anzdz      LIKE  cabn-anzdz,    " Number of decimal places
      END OF t_result.

DATA: BEGIN OF table1 OCCURS 0,
       text(2000)             TYPE c,
      END OF table1.

DATA: filetype          LIKE rlgrap-filetype  VALUE 'DAT',
      w_pcfile          LIKE rlgrap-filename,
      w_counter         TYPE i,
      w_count1          TYPE i,
      w_len             TYPE i,
      w_currency(15),
      w_message(132).

DATA: t_configuration TYPE ibco2_instance_tab2,
      w_configuration TYPE ibco2_instance_rec2.

DATA: w_values LIKE ibvalue0.

DATA: BEGIN OF w_cabn,
        atfor  LIKE  cabn-atfor, " Type of characteristic
        anzst  LIKE  cabn-anzst, " Number of characters
        anzdz  LIKE  cabn-anzdz, " Number of decimal places
      END OF w_cabn.

DATA: w_configuration_ind(3) TYPE n,
      w_no_recs              TYPE i.

REFRESH t_marc_info.
SELECT matnr werks cuobj INTO TABLE t_marc_info
  FROM marc
  WHERE matnr IN p_matnr
    AND werks IN p_werks
    AND cuobj NE 0.

REFRESH t_result.
*
LOOP AT t_marc_info.
*
  CLEAR t_result.

  REFRESH t_configuration.
  CLEAR   t_configuration.

  CALL FUNCTION 'CUCB_GET_CONFIGURATION'
       EXPORTING
            instance      = t_marc_info-cuobj
       IMPORTING
            configuration = t_configuration
       EXCEPTIONS
            OTHERS        = 1.
  IF sy-subrc <> 0.
    CONTINUE.
  ENDIF.
*
  SELECT SINGLE spart
  INTO t_marc_info-spart
  FROM mara
    WHERE matnr = t_marc_info-matnr.

  t_result-werks = t_marc_info-werks.
  t_result-matnr = t_marc_info-matnr.
  t_result-spart = t_marc_info-spart.

  LOOP AT t_configuration INTO w_configuration.
    w_configuration_ind = sy-tabix.
    LOOP AT w_configuration-values INTO w_values.

      WRITE w_values-atinn TO t_result-atnam.
      IF NOT t_result-atnam IN p_atnam.
        CONTINUE.
      ENDIF.

      SELECT atfor anzst anzdz
        FROM cabn
        INTO (w_cabn-atfor, w_cabn-anzst, w_cabn-anzdz)
        WHERE atinn EQ w_values-atinn. " Internal Characteristic
        EXIT.
      ENDSELECT.

      IF sy-subrc <> 0.
        CLEAR w_cabn.
      ENDIF.

      t_result-atflv = w_values-atflv.
      t_result-atfor = w_cabn-atfor.
      t_result-anzst = w_cabn-anzst.
      t_result-anzdz = w_cabn-anzdz.

      PERFORM take_characteristic
        USING w_values-atwrt
              w_values-atflv
              w_cabn
        CHANGING t_result-char_value.

      APPEND t_result.

    ENDLOOP.
  ENDLOOP.
*
ENDLOOP.
*
DESCRIBE TABLE t_result LINES w_no_recs.
IF w_no_recs = 0.
  MESSAGE i001 WITH 'No Records found with given Criterias'.
  EXIT.
ENDIF.

SORT t_result
  BY werks
     matnr
     spart
     atnam.

IF p_dload IS INITIAL.
  PERFORM list_result.
ELSE.
  PERFORM download_result.
ENDIF.
*
EXIT.
*
*****************
FORM list_result.
*****************
*
  IF p_extra IS INITIAL.
    WRITE: /
          'Plant',
        7 'Matnr',
       26 'Spart',
       32 'Char_name',
       63 'Char_value'.
  ELSE.
    WRITE: /
          'Plant',
        7 'Matnr',
       26 'Spart',
       32 'Char_name',
       63 'Char_value',
       94 'Num_char_value',
      118 'Type',
      124 'Len',
      128 'Dec'.
  ENDIF.

  LOOP AT t_result.
    IF p_extra IS INITIAL.
      WRITE: /
              t_result-werks,
           7  t_result-matnr,
          26  t_result-spart,
          32  t_result-atnam,
          63  t_result-char_value.
    ELSE.
      WRITE: /
              t_result-werks,
           7  t_result-matnr,
          26  t_result-spart,
          32  t_result-atnam,
          63  t_result-char_value,
          94  t_result-atflv,
          118 t_result-atfor,
          124 t_result-anzst,
          128 t_result-anzdz.
    ENDIF.

*
  ENDLOOP.
*
ENDFORM. " list_result.

*****************
FORM download_result.
*****************
*
  DATA: w_atflv      LIKE ibvalue0-atwrt.
  DATA: w_anzst      LIKE ibvalue0-atwrt.
  DATA: w_anzdz      LIKE ibvalue0-atwrt.
*
  CONCATENATE   'Plant'      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                'Matnr'      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                'Spart'      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                'Char_name'  CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                'Char_value'
    INTO table1-text.
*
  IF NOT p_extra IS INITIAL.
    CONCATENATE table1-text      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                'Num_char_value' CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                'Type'           CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                'Len'            CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                'Dec'
    INTO table1-text.
  ENDIF.
  APPEND table1.
*
  LOOP AT t_result.
    w_atflv = t_result-atflv.
    SHIFT w_atflv LEFT DELETING LEADING space.
    w_anzst = t_result-anzst.
    SHIFT w_anzst LEFT DELETING LEADING space.
    w_anzdz = t_result-anzdz.
    SHIFT w_anzdz LEFT DELETING LEADING space.
    CONCATENATE   t_result-werks      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                  t_result-matnr      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                  t_result-spart      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                  t_result-atnam      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                  t_result-char_value
    INTO table1-text.

    IF NOT p_extra IS INITIAL.
      CONCATENATE table1-text         CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                  w_atflv             CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                  t_result-atfor      CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                  w_anzst             CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                  w_anzdz
      INTO table1-text.
    ENDIF.
    APPEND table1.
*
  ENDLOOP.
*
  CALL FUNCTION 'DOWNLOAD'
       EXPORTING
*           filename            = w_pcfile
            filetype            = filetype
       TABLES
            data_tab            = table1
       EXCEPTIONS
            conversion_error    = 1
            invalid_table_width = 2
            invalid_type        = 3
            no_batch            = 4
            unknown_error       = 5
            OTHERS              = 6.
  IF sy-subrc NE 0.
    MOVE: 'Download call error & at'(205) TO w_message,
          sy-subrc TO w_currency.
    REPLACE '&' WITH w_currency INTO w_message.
    w_len = strlen( w_message ).
    WRITE:/ w_message, w_pcfile.
    STOP.
  ENDIF.
*
  DESCRIBE TABLE table1 LINES w_counter.
  MOVE: 'Downloaded &1 records'(206) TO w_message,
        w_counter TO w_currency.
  REPLACE '&1' WITH w_currency INTO w_message.
  CONDENSE w_message.
  WRITE:/ w_message.
  CLEAR w_counter.
  SKIP 2.
*
ENDFORM. " download_result.
*
*---------------------------------------------------------------------*
*       FORM take_characteristic                                      *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  P_ALPHA                                                       *
*  -->  P_NUM                                                         *
*  -->  P_FORMAT                                                      *
*  -->  P_CHAR_VALUE                                                  *
*---------------------------------------------------------------------*
FORM take_characteristic
     USING p_alpha LIKE w_values-atwrt
           p_num   LIKE w_values-atflv
           p_format LIKE w_cabn
     CHANGING p_char_value LIKE ibvalue0-atwrt.

  DATA: w_kok        LIKE ibvalue0-atwrt.
  DATA: w_desi       LIKE ibvalue0-atwrt.
  DATA: w_exponentti LIKE ibvalue0-atwrt.
  DATA: w_sign.
  DATA: w_exp_ind(2) TYPE n.
  DATA: w_merkki.
  DATA: w_len        TYPE i.
  DATA: w_offset     TYPE i.
  CLEAR p_char_value.

  IF p_format-atfor <> 'NUM'.
    p_char_value = w_values-atwrt.
    EXIT.
  ENDIF.

  w_kok = p_num.
  SHIFT w_kok LEFT DELETING LEADING space.
*
  SPLIT w_kok AT 'E' INTO w_kok w_exponentti.
  w_sign = w_exponentti+0(1).
  SHIFT w_exponentti LEFT.
  SPLIT w_kok AT '.' INTO w_kok w_desi.

  DO.
    w_len = strlen( w_desi ).
    IF w_len < 2.
      EXIT.
    ENDIF.
    w_offset = w_len - 1.
    w_merkki = w_desi+w_offset(1).
    IF w_merkki = '0'.
      CLEAR w_desi+w_offset(1).
    ELSE.
      EXIT.
    ENDIF.
  ENDDO.

  w_exp_ind = w_exponentti.
  IF     w_exp_ind > 0.
    IF w_sign = '+'.
      DO.
        w_len = strlen( w_desi ).
        w_merkki = w_desi+0(1).
        CONCATENATE w_kok w_merkki INTO w_kok.
        SHIFT w_desi LEFT.
        IF w_len = 1.
          w_desi = '0'.
        ENDIF.
        SUBTRACT 1 FROM w_exp_ind.
        IF w_exp_ind < 1.
          EXIT.
        ENDIF.
      ENDDO.
    ELSE.
      DO.
        w_len = strlen( w_kok ).
        w_offset = w_len - 1.
        w_merkki = w_kok+w_offset(1).
        CONCATENATE w_merkki w_desi INTO w_desi.
        IF w_len = 1.
          w_kok = '0'.
        ELSE.
          CLEAR w_kok+w_offset(1).
        ENDIF.
        SUBTRACT 1 FROM w_exp_ind.
        IF w_exp_ind < 1.
          EXIT.
        ENDIF.
      ENDDO.
    ENDIF.
  ENDIF.
*
  IF w_desi = '0'.
    p_char_value = w_kok.
  ELSE.
    CONCATENATE w_kok w_desi " w_sign w_exponentti
      INTO p_char_value
      SEPARATED BY ','.
  ENDIF.
*
ENDFORM.
